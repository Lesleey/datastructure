一. 递归

    递归的基本性质：函数调用本身
        - 把大规模的问题不断变小，在进行推导的过程

    算法思想
        - 懂得将一个问题的规模变小
        - 再利用从小规模问题中得到结果
        - 再结合当前的值或者情况， 得出最终的结果

    写法结构
        1. 判断该当前情况是否非法， 如果非法立即返回，也称完整性检查。
        2. 判断是否满足结束递归的条件（寻找结束递归条件）。
        3. 将问题的规模缩小，递归调用。
        4. 利用小规模问题的答案和当前数据结合得出完整答案。

    两种方式分析递归算法复杂度
        1. 迭代法

        2. 公式法

二. 回溯
    回溯: 利用递归的性质
        - 从问题的起始点出发， 不断的尝试。
        - 返回一步甚至多步再做选择，直到抵达终点的过程
    回溯算法是一种试探算法，与暴力搜索最大的区别是：在回溯算法中，是一步一步的向前试探，对每一步探测的情况评估，再决定是否继续，可避免走弯路。

    回溯算法的精华
        - 出现非法的情况时，可退回之前的情景，可返回一步或者多步。
        - 再去尝试别的路径和办法。
       想要采取回溯算法就必须保证：每次都有多种尝试的可能。

    写法结构
        1. 判断当前的情况是否非法，如果非法直接返回。
        2. 当前情况是否满足条件，如果是将结果保存返回。
        3. 在当前情况下，遍历所有可能的情况，并进行递归。
        4. 递归完毕后，立即回溯，回溯的方法就是取消前一步进行的尝试。
